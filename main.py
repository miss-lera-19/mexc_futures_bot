import os
import time
import ccxt
import logging
import asyncio
from telegram import Bot
from telegram.constants import ParseMode

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
API_KEY = os.getenv("MEXC_API_KEY")
API_SECRET = os.getenv("MEXC_SECRET_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂—ñ
exchange = ccxt.mexc({
    'apiKey': API_KEY,
    'secret': API_SECRET,
    'enableRateLimit': True,
    'options': {'defaultType': 'future'}
})

# –¢–æ—Ä–≥–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
symbols = {
    "SOL/USDT:USDT": {"leverage": 300},
    "BTC/USDT:USDT": {"leverage": 500},
    "ETH/USDT:USDT": {"leverage": 500}
}
margin = 100

async def check_market():
    while True:
        try:
            for symbol, config in symbols.items():
                market = exchange.market(symbol)
                price_data = exchange.fetch_ticker(symbol)
                price = price_data['last']

                # –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: —ñ–º–ø—É–ª—å—Å–Ω–∏–π –≤—Ö—ñ–¥ (–º–æ–∂–Ω–∞ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–∏—Ç–∏)
                ohlcv = exchange.fetch_ohlcv(symbol, timeframe='1m', limit=5)
                close_prices = [c[4] for c in ohlcv]
                avg_price = sum(close_prices) / len(close_prices)

                signal = None
                if price > avg_price * 1.003:
                    signal = "LONG üöÄ"
                elif price < avg_price * 0.997:
                    signal = "SHORT üü•"

                if signal:
                    text = f"üìà <b>–ù–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª: {signal}</b> –Ω–∞ {symbol.split(':')[0]}
üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: <code>{price:.4f}</code>"
                    await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode=ParseMode.HTML)

            await asyncio.sleep(60)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É: {e}")
            await asyncio.sleep(60)

if __name__ == "__main__":
    asyncio.run(check_market())
